{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/accordion/accordion.component.ts","webpack:///src/app/components/accordion/accordion.component.html","webpack:///src/app/services/accordion.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","AccordionComponent","accordionService","accordion","getAccordion","index","element","document","getElementById","classList","toggle","isActive","ans","style","maxHeight","scrollHeight","AccordionService","http","get","providedIn","environment","production","bootstrapModule","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AccordionComponent } from './components/accordion/accordion.component';\n\n\nconst routes: Routes = [\n  { path: '', component: AccordionComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'ng-accordion';\n}\n","<div class=\"container\">\n  <router-outlet></router-outlet>\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { AccordionComponent } from './components/accordion/accordion.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    AccordionComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { AccordionService } from '../../services/accordion.service'\n \n@Component({\n  selector: 'app-accordion',\n  templateUrl: './accordion.component.html',\n  styleUrls: ['./accordion.component.scss']\n})\nexport class AccordionComponent implements OnInit {\n  accordion;\n  isActive: boolean;\n  \n  constructor(\n    private accordionService: AccordionService\n  ) { }\n\n  ngOnInit() {\n    this.accordion = this.accordionService.getAccordion()\n  }\n\n  // toggle acordion\n  toggleAccordian(index) {\n    const element = document.getElementById('q' + index);\n    element.classList.toggle(\"active\");\n    \n    this.isActive ? this.isActive = false : this.isActive = true;    \n\n    const ans = document.getElementById('a' + index);\n    ans.style.maxHeight ? ans.style.maxHeight = null : ans.style.maxHeight = ans.scrollHeight + \"px\";\n  } \n}\n\n","\n<div class=\"accordion\">\n    <h1 class=\"accordion-title\">Have a Question? We can help</h1>\n    <div class=\"accordion__item\" *ngFor=\"let a of accordion|async,let i = index\">\n        <div id='q{{i}}' class=\"accordion__question\" (click)=\"toggleAccordian(i)\">\n            <div class='question-num'>\n                <span>Q{{i + 1}}</span>\n            </div>\n            <div class='question-text'>\n                <span>{{a.question}}</span>\n            </div>\n            <div class='question-toggle'>\n                <div class='question-toggle__svg'>\n                    <svg class=\"svg-rotate__icon\" width=\"40px\" height=\"40px\" viewBox=\"0 0 357 357\">\n                        <g id=\"add\">\n                            <path d=\"M357,204H204v153h-51V204H0v-51h153V0h51v153h153V204z\"/>\n                        </g>\n                    </svg>\n                </div>\n            </div>\n        </div>\n\n        <div id=\"a{{i}}\" class=\"accordion__answer\">\n            <p>{{a.answer}}</p>\n        </div>\n    </div>\n</div>","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\n\n// Accordion service.\nexport class AccordionService {\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n  // returns JSON data.\n  getAccordion() {\n    return this.http.get<accordionTypes>('/assets/faqs.json');\n  }\n}\n\ninterface accordionTypes {\n  number: number,\n  question: string,\n  answer: string\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}